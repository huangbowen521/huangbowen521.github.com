---
layout: post
title: 如果让我完善几年前的一个项目，我会做哪些改进?
date: 2014-02-17 00:18
comments: true
categories: practise
---

在08年的时候，我还没有大学毕业，当时在一家公司实习。那时候老板接了一个项目，是一个给中石油某下属公司做的一个web版本的管理系统，我和一个同学硬着头皮接下来做完了。这个系统后端用的是c#的web form,前端普通的html+css+javascript，数据库使用的是sql server2005，部署服务器使用的是Microsoft Server 2008。现在回顾这个系统，虽然代码写的烂，架构写的烂，但是能够正常运行，这是偶尔有一些莫名其妙难以解决的小bug。毕竟是自己5年前的代码嘛，那时候自己太嫩了，好多东西都不知道，没有多少经验。

<!-- more -->

那如果现在要我给这个系统做功能升级，甚至重做这个系统，我会进行哪些改进那？这是个有意思的话题，如果你能真的找出很多可供改进的店出来，那么说明这几年来你真的在进步。

现在还真有可能会对这个系统做功能升级。我想了一下，会在一下几个方面做出改进和调整。

1. 使用最新的Visual Studio IDE,并且装上ReSharper插件。现在自己已经成了一个快捷键控、重构控。俗话说，工欲成其事,必先利其器。好的程序员当然要用最好的工具了。新的Visual Studio在效率方面、智能提示方面都有改善。ReSharper作为.net下的重构利器当然必不可少。

2. 将代码托管到github的私有代码库中，使用git作为源代码管理工具。以前项目中使用的是svn，使用的公司服务器作代码托管，而公司服务器不是那么的稳定。git作为一款分布式源代码管理工具，脱离了中央服务器的束缚，并且拥有快速创建、切换分支，本地提交等特性，完爆svn。github作为全球最大的代码托管中心，方便实用，最便宜的会员7$每月，经济实惠。

3. 给系统中的重要功能打好LOG。想当年我们想要记录一些程序log，还要自己写一个简易的log类库。现在有很多成熟的log框架可以被c#使用。试想当你的程序部署到服务器上以后，如果没有充足的log，那么排查bug是多么的困难。服务器上又不能让你还原现场，不能调试，唯一能帮上忙的就是那些log了。当然打log也有很多学问，比如log等级设置，输出设置等，这里就不细说了。


4. 使用事务机制处理复杂逻辑。在这个系统中有很多并发操作，当时自己并不是很懂事务，使用了一些很蹩脚的方法来处理可能的数据异常。现在我会采用成熟的分布式事务机制来处理这些并发逻辑，使程序更加健壮。

5. 使用TDD，提高单元测试覆盖率。以前的系统中没有任何单元测试，一段简单的代码都需要启动程序手工验证。这样的反馈太耗时，并且不具备重复性。测试驱动开发能够保证代码简洁、正确，并且能快速得到反馈，保证测试覆盖率。遇到遗留代码时，也可以先添加单元测试，建立保护网，使重构更有信心。

6. 使用webdriver进行自动化功能性测试。曾经在给客户演示前，我改了一段代码，没想到这段代码恰好破坏了给客户演示的一个重要功能。如果有自动化的功能性测试那么就可以避免这一切。自动化功能测试能增强对产品的信心，每次改动都在可控范围之内。


7. 编写构建脚本，实现持续集成。即使只有一个人工作在这个项目中，也应当编写构建脚本，应用持续集成。这样才能保证你的每一次提交都是安全的；并且将一些重复的工作自动化起来，可以解放你的大脑关注到更重要的地方去。


8. 自动化部署。每次部署项目到服务器上是一个痛苦的经历，需要手动的替换项目中的某些文件，将文件复制到服务器上，终止当前服务器服务.....哪一个环节出错都是一个致命的打击。手动不仅效率低，而且极易出错。通过编写脚本实现自动化部署可以一劳永逸，和繁琐的手动操作说拜拜吧。


9. 使用Nuget作为依赖项管理工具。如果你想要引用一个第三方依赖项，还需要手动从网上下载并添加到项目中的话，那你就out了。作为一个Java程序员，maven,gradle等构建工具已是标配，它们都提供了对依赖项的自动化管理。你只需要添加一行字符串来说明你想要使用那个类库，下载、引用就全交给管理工具来实现了。在c#世界中当然也有相应的产品，那就是Nuget，从此依赖项管理再也不是一件头痛的事情了。

10. 多使用c#自身的特性，如LINQ，委托，函数式编程等。比起不思进取的java语言，c#不知道强多少倍。java在java 8版本才正式引入Lambda,而c#的LINQ早都出来多少年了。如果在进行列表操作时，你还只使用foreach，那么你太老土了。列表操作无非是filter,map,sort...而c#早为我们提供了一系列扩展方法，如Where,Select,Sort....可怜Java中只能使用Guava这种不伦不类的第三方类库来实现相应的效果，而且远没有c#的原生功能漂亮。c#既然每年都会引用那么多的特性，那么就要学习、掌握和使用。很多人一边使用着c#的老土语法，一边说自己精通c#,真让人无语。放着那么多好特性不用，让我们这些java程序员真是羡慕嫉妒恨。

11. 使用一些前端框架和JavaScript框架。对于我这种前端小白，想让我设计出漂亮的页面还真是力不从心。不用怕，设计者已经考虑到了前端无能者的感受，譬如bootstrap之类的前端UI框架简直为我们而生。这些不但使用简单，效果明显，还自带响应式设计，实在是前端小白的利器，实现自己精美的web站点不再是梦。JavaScript就不多说了，什么jQuery，AngularJs，ExtJs.....各种框架类库层出不穷，涵盖了前端开发的方方面面。无论你是想画图，操作DOM元素，创建单页应用,使用MVC架构.....在JavaScript的世界里你总有多种选择。想当年我为了在web页面中展现一张统计图，采用了使用.net在后台实时绘制成图片加载到前台显示，都是泪啊。现在好了，只需要将数据模型绑定给图表控件，分分钟搞定。


好了，就写这么多了。如何判断一个程序员真的具有N年工作经验，而不是1年工作经验重复使用了N年？一个好的办法就是和拿出一个以前的项目出来，看他都会做哪些改进。

对于工作多年的程序员来说，知识面、视野一定要广，这样才有竞争力。这靠的是平时的学习和积累，还要善于思考，如何能把手头的事情做得更好。













